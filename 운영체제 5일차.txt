<운영체제의 발전>
순차처리 - 하나의 일이 독점해서 cpu사용 
- 리소스 사용율이 떨어짐
단순일괄 처리 시스템 
- 포트란 코볼 포트란 이런식으로 시행되던게 포트란 작업은 포트란을 모아서 처리 코볼 작업은 코볼컴파일러가 올라왔을때 한번에 처리 (컴파일러 내리고 올리는 자원을 절약함)
멀티프로그래밍 일괄처리시스템
 - 하나의 cpu에 여러 일을 올림 (처리기의 이용률 최대화)
 - cpu 파워가 100%까지 사용될수 있게함
시분할시스템 - 인터렉션이 가능해졌다 (이번시간에 할것)

<시분할 시스템>
여러개의 작업을 다루기에 적합함
cpu를 여러 process가 공유한다 (시간단위로 나눠사용함)

목적
- 응답시간의 최소화

<운영체제의 주요기능>
프로세스 관리
메모리 관리
cpu scheduling 기법
파일관리 > Unix system programming 에서 다룸
입출력 관리
보조기억장치 관리 > Unix system programming 에서 다룸
네트워킹
정보 보호 및 보안
스케줄링 및 자원관리
명령어 해석기 > unix 기초

<프로세스 관리>
멀티프로그래밍 일괄처리 동작
- cpu는 주메모리에 있는 다양한 프로그램들을 돌아가며 실행시킨다
타임 쉐어링
- 개별 사용자에게 빨리 응답해야 하면서도 동시에 여러 사용자들을 지원할 수 있어야한다
리얼타임 트랜젝션 시스템
- 많은 사용자들이 한 db에 대해 동시에 질의와 갱신을 입력한다

<메모리 관리>
5가지 핵심기능
-프로세스 분리
-자동 할당 및 관리
-모듈식 프로그래밍 지원
-보호 및 접근제어
-영구적 저장지원

<가상메모리>
주메모리 양에 관계없이 프로그램을 실행시켜줌
프로그램을 프로세스조금만 올려서 실행하고 실행이 끝나면 주메모리에서 해제하고 새로 실행할 다음부분을 가져와서 실행한다
보조메모리에 한계를 가지게 된다


<최근 운영체제로의 발전>
마이크로커널구조

<마이크로커널 구조>
몇몇 핵심기능들만 커널에 포함시킴
장점 : 분산환경 적합, 유연성제공, 구현의 단순화

<멀티쓰레딩>
한 프로세스를 여러개의 쓰레드로 나누어 병행적 실행을 하는 기법


<-- 여기까지 운영체제 오벼뷰 -->

3장 프로세스 기술 및 제어
<학습목표>
프로세스와 프로세스제어블록 사이의 관계 With 운영체제의 자료구조

<영체제 요구조건>
- 사용자에게 적절한 응답시간을 제공해야함
- 여러사람이 사용하더라도 내가 이 컴퓨터를 독점적으로 사용하는 것처럼
- 이런 응답시간을 위해 처리기 이용률을 극대화 / 한 cpu가 여러 프로세스 수행을 인터리빙 해야한다
- 운영체제는 교착상태를 회피하고, 특정 정책에 부합하도록 (cpu이용률을 극대화할거냐/ 특정 프로세스를 우대할거냐) 자원을 프로세스에 할당해햐함
- 프로세스 간 통신과 프로세스 생성을 지원해줘야한다.

<프로세스란>
하드웨어 자원들의 집합으로 구성
어떤 업무를 수행하기위해 개발됨
os없이 개발하는것은 비효율적
- 공통 루틴 개발유도
- 자원공유를 위한 소프트웨어 필요
- 자원 보호 기법 필요
os는 편리하고 안전한 인터페이스를 제공

정의
- 수행중인 프로그램 *
- 한 프로그램의 인스턴스
- cpu에 할당되어 실행될수 있는 개체

구조
-프로그램 코드
-일련의 데이터
-프로세스 정보

<프로세스 구성요소>
식별자
상태(7-state), 우선순위, 프로그램 카운터
메모리 포인터, 문맥데이터 (3개, 하드웨어 시스템 메모리 컨텍스트), 입출력 상태 정보, 어카운팅 정보

*프로세스를 생성하고 종료하는데 오버헤드가 많기 때문에 쓰레드를 생성해서 수행하는 멀티쓰레딩이 나왔다.


<프로세스 상태>
수행 궤적
디스패쳐 - cpu를 할당해 주는거, 프로세스 스위칭(10000cpu)

프로세스 종료
정상종료
시간한도초과
메모리 부족
경계범위 위반
보호 오류
산술 오류
시간초과
입출력 실패
무효 명령어
특권명령어
데이터 오용
오퍼레이터나 운영체제 간섭 (교착상태 발생)
부모 종료

-7state model 외워서 하지 말자
수행
준비, ready/suspend
블록, blocked/suspend
생성
종료
5State + 스왑스페이스2 개

보류상태의 프로세스 도입 (suspended process)
스와핑
- 스왑- 인, 스왑-아웃

스와핑의 필요성
- 더 많은 가용 메모리
- 주기억장치에 준비상태의 프로세스가 없을때


<프로세스 기술>
OS: 프로세스와 자원관리
어떤 프로세스가 어떤 자원을 요청하고 있는지 혹은 어떤 자원을 할당 받았는지를 알아야함



<프로세스 제어>



<운영체제의 실행형태>

































