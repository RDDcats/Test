운영체제 3주

안드로이드는 리눅스를 썼다
리눅스 커널은 c로 작성되어있다
커널 위에 라이브러리 작성 (c)
그 위에 어플리케이션 프레임워크 (java)
그 위에 프로그래머 애플리케이션 (java android sdk이용)

android ndk 자바 코드로 c를 호출하는 방법 제공


어떻게 운영체제를 활용하는가?
운영체제는 하드웨어와 소프트웨어간의 중간자이다
일반 사용자에게는 컴퓨팅 환경을 제공해준다
프로그래머에게는 개발환경을 제공해준다

프로그래밍 실행절차
.c > .o > .dll 다이나믹하게 적제하는 라이브러리

라이브러리 > 시스템콜을 이용해서 더 많은 기능을 지원해주는것

<시스템 콜>
 - 운영체제 서비스를 프로그램에서 이용할수 있도록 운영체제가 제공하는 함수, (커널 모드에서 실행됨)
 - 운영체제는 커널모드에서 동작이됨
 - 자원관리자 > 추상적인 자원 물리적인 자원 관리

메모리 관리 > 시스템콜
링크드리스트 동적할당 > malloc free > 시스템콜
프로세스 관리 > fork(), exit() > 시스템콜
파일관리 > open(), read() write() close() > 시스템콜
등등

<라이브러리>
사용자 모드에서 실행됨
사용자에게 편의성을 제공하는 함수의 집합

unix 시스템 호출 예시 (2학기 유닉스 프로그래밍 시스템에서 배움)
fork, waitpid, exec, exit, 
create, open, read, write, lseek, stat, mkdir, rmdir
signal, kill, alarm, sleep

> 성능 관련된 최적화에 대해서 알수있음


1하드디스크 접근 140만 cpu 사이클

unix 명령어 설명
ls ls-l 등등
cd chmod 뭐 전부 한번 읽어줌


유용한사이트(안유용함)

요약
지나가버림


1장 (본격적으로 시작함)
인터럽트 대박 중요함
메모리 계층구조 설명할거임 (차이 속도 가격)

이번학기에는 단일 cpu에서만 설명

하드웨어 구성요소
처리기(cpu) - 연산, 레지스터(연산시 사용하는 저장장소), x86, arm
주기억장치 - 휘발성
저장 장치 - 비휘발성, 플래쉬 메모리
입출력장치
통신장치


cpu - 시스템 버스로 연결 - 메모리, 입출력 모듈
cpu안에는 많은 레지스터가 있다
중요한 몇개가 있는데
PC -프로그램 카운터 - 다음에 실행할 명령어 주소를 가지고 있음
IR - 실행할 명령어를 가지고옴
MAR 주소- 메모리의 주소 - 어떤주소에 저장하고 어떤주소에서 데이터를 가져올껀지 - 다음번에 읽거나 쓸 주소를 명시
MBR 버퍼- MAR에 지정된 주소에 저장하거나 데이터를 가져올때 사용
IO AR - 입출력 데이터 주소저장
IO BR - 입출력 데이터 저장

마이크로 프로세서 - 간단설명 - 단일칩에 프로세서를 집적 - 개빠름 - 멀티프로세서로 발전(하나의 칩에 여러 프로세서 포함)
GPU - 그래픽처리에 적합하게 만듦, 하나의 명령으로 병렬처리
DSP - 스트리밍 처리에 최적화됨 프로세서
SoC - CPU에 DSP GPU IO 주기억장치등이 하나의 칩에 내장
> 용어는 알고계시면 좋을것같습니다

제어 및 상태 레지스터
-cpu의 작동을 제어하기 위해 사용
-커널모드를 사용할때만 실행됨 - 일반실행시엔 안됨
PC
IR
프로그램 상태 워드 PSW = 제어를 위한 정보가 저장된다.
 - 인터럽트 가능화/ 불능화
 - 슈퍼바이저/ 사용자 모드
 - 조건코드 또는 플래그 - positive result, negative result, zero, overflow

명령어 실행 - 단순하게 실행됨
1. fetch 반입단계 cpu가 메모리로 부터 명령어를 읽음(PC에서 주소 가져옴)
2. cpu가 명령어를 실행

반입된 명령어는 명령어 레지스터에 적제
명령어의 종류(4가지)
처리기,메모리 간 데이터 전달
처리기,IO 간의 데이터 전달
데이터 처리 - 데이터에 산술 또는 논리연산
제어 - 실행순서의 변경

(쉬는시간)

<가상기계가 있다면>
명령어 형식
연산코드는 4비트(16가지) 12비트는 주소
정수형식
1비트 부호 15비트 절대값

내부 cpu 레지스터
PC - 명령어 주소
IR - 수행될 명령어
AC 누산기 - 임시저장소

연산코드 목록의 일부
0001 - 메모리에 저장된값을 AC에 적재
0010 - AC에 저장된 값을 메모리에 저장
0101 - 메모리에 저장된 값을 AC에 더함


300~302 명령어의 집합

940~      데이터의 집합

PC는 반입단계를 지나면 자동으로 1이 증가함


<a.out 실행가능한 파일은 어떻게 구성되어있나>
맨위에 meta정보 (뭐로 컴파일되어있고 cpu 어떤식으로 되어있고 사이즈 얼마고)
그다음에 명령어 부분 (Text라고 부름)
그다음에 데이터 부분

프로세스 제어블록 - 운영체제
텍스트(코드, 명령어만 모아둠)
데이터(전역변수)
힙(동적메모리 할당)
free area
스택(지역변수, 매개변수)


<프로그램 제어 예>
중요한건 
글로벌 변수는 데이터 섹션에 들어감
로컬변수는 스택에 들어감

"글로벌c랑 로컬c가 선언되어 있다면 어떻게하나??"
스코프 룰 - 그냥 알던거랑 같은 함수안에 있으면 함수안에꺼 우선시행

프로그램 디버깅 예제
프로그램 제어 예를 이해하길 바란다

<인터럽트>
운영체제는 다른 소프트웨어를 서비스하기 위해 존재
서비스에서 시스템 콜을 호출
시스템콜이 있음을 알려주는게 인터럽트
디바이스에서 문제가 발생했을때 알려주는것 = 인터럽트

cpu는 디바이스가 작업을 완료할때까지 기다려야함
근데 디바이스는 보통 ㅈㄴ 느림
Blocking IO의 문제
그럼 cpu는 돌고있고 디바이스가 자신이 끝났음을 cpu한테 알려주면 됨 > 이걸 하는 방법이 인터럽트

<컴퓨터 시스템의 전형적인 수행시간>
context switch 컨텍스위치 - 프로세스를 뺐어서 다른 프로세스를 할당하는것
타임퀀텀 - 프로세스가 해당 시간동안 처리해서 다 못해서 뺏기는 기준시간

이거 표있는데 한번 읽으면 좋을듯
여러번 얘기할거다~


<인터럽트는 왜 사용하냐>
cpu는 디바이스가 작업을 완료할때까지 기다려야함
근데 디바이스는 보통 ㅈㄴ 느림
> 성능저하
디바이스가 작업이 완료되면 cpu에 인터럽트를 걸 수 있도록 허용

인터럽트 종류도 여러개임
프로그램 - 산술연상 오버플로, 불법적인 기계명령어 수행시도
타이머 - 정규적으로 작업하게한다
입출력 - 입출력 연산의 정상적인 종료를 알리거나 에러를 알려준다
하드웨어 실패 - 전원결함, 메모리 패리티에러와 같은 결함을 알려준다

<인터럽트 동작방식>
cpu가 인터럽드를 검사 > 프로그램의 실행의 보류 > 인터럽트 처리 루틴을 실행한다.
문제점: cpu 레지스터값은 다른애가 실행될때 덮어써버려서 날라갈수있음. 반드시 cpu 레지스터값은 인터럽트 루틴이 실행되기 전에 어딘가에 저장되어야함. PCB 프로세스 컨트롤 블락에 저장함

<인터럽트와 프로그램 제어 흐름>
순서 따라가기 가능해야할듯














